/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom.events;

import org.w3c.dom.events.*;
//com.lixto imports
import org.mozilla.dom.*;
//XPCOM import

import org.mozilla.interfaces.*;


public class EventImpl implements org.w3c.dom.events.Event
{
    protected nsIDOMEvent moz;
    protected static WeakValueHashMap instances = new WeakValueHashMap();
    
    public EventImpl(nsIDOMEvent mozInst)
    {
        moz = mozInst;
        instances.put(mozInst, this);
    }    

    public static EventImpl getDOMInstance(nsIDOMEvent mozInst)
    {
        EventImpl node = (EventImpl) instances.get(mozInst);
        return node == null ? new EventImpl(mozInst) : node;
    }
    
    public nsIDOMEvent getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return moz;
    }
    
    public boolean getCancelable()
    {
        boolean result = getInstance().getCancelable();
        return result;
    }
    
    public short getEventPhase()
    {
        int result = getInstance().getEventPhase();
        return (short) result;
    }
    
    public String getType()
    {
        String result = getInstance().getType();
        return result;
    }
    
    public EventTarget getTarget()
    {
        nsIDOMEventTarget result = getInstance().getTarget();
        return (EventTarget) NodeFactory.getNodeInstance(result);
    }
    
    public void initEvent(String eventTypeArg, boolean canBubbleArg, boolean cancelableArg)
    {
        getInstance().initEvent(eventTypeArg, canBubbleArg, cancelableArg);
    }
    
    public void preventDefault()
    {
        getInstance().preventDefault();
    }
    
    public long getTimeStamp()
    {
        double result = getInstance().getTimeStamp();
        return (long) result;                
    }
    
    public EventTarget getCurrentTarget()
    {
        nsIDOMEventTarget result = getInstance().getCurrentTarget();
        return (EventTarget) NodeFactory.getNodeInstance(result);
    }
    
    public boolean getBubbles()
    {
        boolean result = getInstance().getBubbles();
        return result;
    }
    
    public void stopPropagation()
    {
        getInstance().stopPropagation();
    }
    
}
