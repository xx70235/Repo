/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom.ranges;

//org.w3c imports
import org.w3c.dom.*;
import org.w3c.dom.ranges.*;
//com.lixto imports
import org.mozilla.dom.*;
//XPCOM import
import org.mozilla.interfaces.*;


public class RangeImpl implements org.w3c.dom.ranges.Range
{
    protected nsIDOMRange moz;
    protected static WeakValueHashMap instances = new WeakValueHashMap();
    
    public RangeImpl(nsIDOMRange mozInst)
    {
        moz = mozInst;
        instances.put(mozInst, this);
    }    

    public static RangeImpl getDOMInstance(nsIDOMRange mozInst)
    {
        RangeImpl node = (RangeImpl) instances.get(mozInst);
        return node == null ? new RangeImpl(mozInst) : node;
    }
    
    public nsIDOMRange getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return moz;
    }
    
    public void setEnd(Node refNode, int offset)
    {
        nsIDOMNode mozRefnode = ((NodeImpl) refNode).getInstance();
        getInstance().setEnd(mozRefnode, offset);
    }
    
    public DocumentFragment cloneContents()
    {
        nsIDOMDocumentFragment result = getInstance().cloneContents();
        return (DocumentFragment) NodeFactory.getNodeInstance(result);
    }
    
    public void setEndAfter(Node refNode)
    {
        nsIDOMNode mozRefnode = ((NodeImpl) refNode).getInstance();
        getInstance().setEndAfter(mozRefnode);
    }
    
    public short compareBoundaryPoints(short how, Range sourceRange)
    {
        nsIDOMRange mozSourcerange = ((RangeImpl) sourceRange).getInstance();
        short result = getInstance().compareBoundaryPoints(how, mozSourcerange);
        return result;
    }
    
    public void setStart(Node refNode, int offset)
    {
        nsIDOMNode mozRefnode = ((NodeImpl) refNode).getInstance();
        getInstance().setStart(mozRefnode, offset);
    }
    
    public Node getCommonAncestorContainer()
    {
        nsIDOMNode result = getInstance().getCommonAncestorContainer();
        return NodeFactory.getNodeInstance(result);
    }
    
    public void setEndBefore(Node refNode)
    {
        nsIDOMNode mozRefnode = ((NodeImpl) refNode).getInstance();
        getInstance().setEndBefore(mozRefnode);
    }
    
    public void surroundContents(Node newParent)
    {
        nsIDOMNode mozNewparent = ((NodeImpl) newParent).getInstance();
        getInstance().surroundContents(mozNewparent);
    }
    
    public void setStartAfter(Node refNode)
    {
        nsIDOMNode mozRefnode = ((NodeImpl) refNode).getInstance();
        getInstance().setStartAfter(mozRefnode);
    }
    
    public Range cloneRange()
    {
        nsIDOMRange result = getInstance().cloneRange();
        return new RangeImpl(result);
    }
    
    @Override
	public String toString()
    {
        String result = getInstance().toString();
        return result;
    }
    
    public void selectNodeContents(Node refNode)
    {
        nsIDOMNode mozRefnode = ((NodeImpl) refNode).getInstance();
        getInstance().selectNodeContents(mozRefnode);
    }
    
    public void collapse(boolean toStart)
    {
        getInstance().collapse(toStart);
    }
    
    public boolean getCollapsed()
    {
        boolean result = getInstance().getCollapsed();
        return result;
    }
    
    public void setStartBefore(Node refNode)
    {
        nsIDOMNode mozRefnode = ((NodeImpl) refNode).getInstance();
        getInstance().setStartBefore(mozRefnode);
    }
    
    public void insertNode(Node newNode)
    {
        nsIDOMNode mozNewnode = ((NodeImpl) newNode).getInstance();
        getInstance().insertNode(mozNewnode);
    }
    
    public void selectNode(Node refNode)
    {
        nsIDOMNode mozRefnode = ((NodeImpl) refNode).getInstance();
        getInstance().selectNode(mozRefnode);
    }
    
    public DocumentFragment extractContents()
    {
        nsIDOMDocumentFragment result = getInstance().extractContents();
        return (DocumentFragment) NodeFactory.getNodeInstance(result);
    }
    
    public void detach()
    {
        getInstance().detach();
    }
    
    public Node getStartContainer()
    {
        nsIDOMNode result = getInstance().getStartContainer();
        return NodeFactory.getNodeInstance(result);
    }
    
    public void deleteContents()
    {
        getInstance().deleteContents();
    }
    
    public Node getEndContainer()
    {
        nsIDOMNode result = getInstance().getEndContainer();
        return NodeFactory.getNodeInstance(result);
    }
    
    public int getEndOffset()
    {
        int result = getInstance().getEndOffset();
        return result;
    }
    
    public int getStartOffset()
    {
        int result = getInstance().getStartOffset();
        return result;
    }
    
}
