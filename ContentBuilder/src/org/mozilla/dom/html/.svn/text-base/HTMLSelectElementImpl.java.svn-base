/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom.html;

import org.w3c.dom.html2.*;
//com.lixto imports
import org.mozilla.dom.*;
//XPCOM import
import org.mozilla.interfaces.*;


public class HTMLSelectElementImpl extends HTMLElementImpl implements org.w3c.dom.html2.HTMLSelectElement
{
    protected HTMLSelectElementImpl(nsIDOMHTMLSelectElement mozInst)
    {
        super( mozInst );
    }

    public static HTMLSelectElementImpl getDOMInstance(nsIDOMHTMLSelectElement mozInst)
    {
        HTMLSelectElementImpl node = (HTMLSelectElementImpl) instances.get(mozInst);
        return node == null ? new HTMLSelectElementImpl(mozInst) : node;
    }
    
    @Override
	public nsIDOMHTMLSelectElement getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return (nsIDOMHTMLSelectElement) moz;
    }
    
    public HTMLFormElement getForm()
    {
        nsIDOMHTMLFormElement result = getInstance().getForm();
        return (HTMLFormElement) NodeFactory.getNodeInstance(result);
    }
    
    public void focus()
    {
        getInstance().focus();
    }
    
    public int getSize()
    {
        int result = getInstance().getSize();
        return result;
    }
    
    public HTMLOptionsCollection getOptions()
    {
        throw new UnsupportedException();
    }
    
    public void setMultiple(boolean multiple)
    {
        getInstance().setMultiple(multiple);
    }
    
    public int getLength()
    {
        long result = getInstance().getLength();
        return (int) result;        
    }
    
    public String getName()
    {
        String result = getInstance().getName();
        return result;
    }
    
    public boolean getMultiple()
    {
        boolean result = getInstance().getMultiple();
        return result;
    }
    
    public void add(HTMLElement element, HTMLElement before)
    {
        nsIDOMHTMLElement mozElement = ((HTMLElementImpl) element).getInstance();
        nsIDOMHTMLElement mozBefore = ((HTMLElementImpl) before).getInstance();
        getInstance().add(mozElement, mozBefore);
    }
    
    public void blur()
    {
        getInstance().blur();
    }
    
    public void setTabIndex(int tabIndex)
    {
        getInstance().setTabIndex(tabIndex);
    }
    
    public void setValue(String value)
    {
        getInstance().setValue(value);
    }
    
    public void setName(String name)
    {
        getInstance().setName(name);
    }
    
    public int getSelectedIndex()
    {
        int result = getInstance().getSelectedIndex();
        return result;
    }
    
    public String getType()
    {
        String result = getInstance().getType();
        return result;
    }
    
    public int getTabIndex()
    {
        int result = getInstance().getTabIndex();
        return result;
    }
    
    public void setSelectedIndex(int selectedIndex)
    {
        getInstance().setSelectedIndex(selectedIndex);
    }
    
    public void remove(int index)
    {
        getInstance().remove(index);
    }
    
    public String getValue()
    {
        String result = getInstance().getValue();
        return result;
    }
    
    public void setDisabled(boolean disabled)
    {
        getInstance().setDisabled(disabled);
    }
    
    public boolean getDisabled()
    {
        boolean result = getInstance().getDisabled();
        return result;
    }
    
    public void setSize(int size)
    {
        getInstance().setSize(size);
    }

	public void setLength(int length) {
		getInstance().setLength(length);		
	}
    
}
