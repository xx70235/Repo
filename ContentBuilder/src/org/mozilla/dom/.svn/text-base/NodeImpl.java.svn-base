/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom;

//org.w3c imports
import org.mozilla.dom.events.EventImpl;
import org.mozilla.dom.events.EventListenerImpl;
import org.mozilla.interfaces.*;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.UserDataHandler;
import org.w3c.dom.events.Event;

public class NodeImpl implements org.w3c.dom.Node, org.w3c.dom.events.EventTarget
{
    protected nsIDOMNode moz;
    protected static WeakValueHashMap instances = new WeakValueHashMap();
        
    public static NodeImpl getDOMInstance(nsIDOMNode mozInst)
    {
        NodeImpl node = (NodeImpl) instances.get(mozInst);
        return node == null ? new NodeImpl(mozInst) : node;
    }
    
    public nsIDOMNode getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return moz;
    }
    

/***************************************************************
 *                                                             *
 * Node implementation code            *
 *                                                             *
 ***************************************************************/
 
    public NodeImpl(nsIDOMNode mozInst)
    {
        moz = mozInst;
        instances.put(mozInst, this);
    }    
    public Node appendChild(Node newChild)
    {
        nsIDOMNode mozNewchild = ((NodeImpl) newChild).getInstance();
        nsIDOMNode result = getInstance().appendChild(mozNewchild);
        return NodeFactory.getNodeInstance(result);

    }
    
    public String lookupPrefix(String namespaceURI)
    {

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        String result = DOM3MozObject.lookupPrefix(namespaceURI);
            return result;
            
    }
    
    public void setNodeValue(String nodeValue)
    {
        getInstance().setNodeValue(nodeValue);

    }
    
    public boolean isSameNode(Node other)
    {
        nsIDOMNode mozOther = ((NodeImpl) other).getInstance();

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        boolean result = DOM3MozObject.isSameNode(mozOther);
            return result;
            
    }
    
    public Node cloneNode(boolean deep)
    {
        nsIDOMNode result = getInstance().cloneNode(deep);
        return NodeFactory.getNodeInstance(result);

    }
    
    public Node getFirstChild()
    {
        nsIDOMNode result = getInstance().getFirstChild();
        return NodeFactory.getNodeInstance(result);

    }
    
    public void setTextContent(String textContent)
    {

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        DOM3MozObject.setTextContent(textContent);

    }
    
    public boolean isEqualNode(Node arg)
    {
        nsIDOMNode mozArg = ((NodeImpl) arg).getInstance();

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        boolean result = DOM3MozObject.isEqualNode(mozArg);
            return result;
            
    }
    
    public void normalize()
    {
        getInstance().normalize();

    }
    
    public boolean isSupported(String feature, String version)
    {
        boolean result = getInstance().isSupported(feature, version);
        return result;

    }
    
    public Object getFeature(String feature, String version)
    {

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        nsISupports result = DOM3MozObject.getFeature(feature, version);
            return result;
            
    }
    
    public Object getUserData(String key)
    {

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        nsIVariant result = DOM3MozObject.getUserData(key);
            return result;
            
    }
    
    public String getPrefix()
    {
        String result = getInstance().getPrefix();
        return result;

    }
    
    public short getNodeType()
    {
        int result = getInstance().getNodeType();
        return (short) result;

    }
    
    public Node getNextSibling()
    {
        nsIDOMNode result = getInstance().getNextSibling();
        return NodeFactory.getNodeInstance(result);

    }
    
    public Node getLastChild()
    {
        nsIDOMNode result = getInstance().getLastChild();
        return NodeFactory.getNodeInstance(result);

    }
    
    public boolean hasChildNodes()
    {
        boolean result = getInstance().hasChildNodes();
        return result;

    }
    
    public short compareDocumentPosition(Node other)
    {
        nsIDOMNode mozOther = ((NodeImpl) other).getInstance();

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        int result = DOM3MozObject.compareDocumentPosition(mozOther);
            return (short) result;
    
    }
    
    public String getBaseURI()
    {

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        String result = DOM3MozObject.getBaseURI();
            return result;
            
    }
    
    public boolean isDefaultNamespace(String namespaceURI)
    {
/* Not supported patch */
        throw new UnsupportedException();}
    
    public boolean hasAttributes()
    {
        boolean result = getInstance().hasAttributes();
        return result;

    }
    
    public Node insertBefore(Node newChild, Node refChild)
    {
        nsIDOMNode mozNewchild = ((NodeImpl) newChild).getInstance();
        nsIDOMNode mozRefchild = ((NodeImpl) refChild).getInstance();
        nsIDOMNode result = getInstance().insertBefore(mozNewchild, mozRefchild);
        return NodeFactory.getNodeInstance(result);

    }
    
    public NodeList getChildNodes()
    {
        nsIDOMNodeList result = getInstance().getChildNodes();
        return new NodeListImpl(result);

    }
    
    public Node getParentNode()
    {
        nsIDOMNode result = getInstance().getParentNode();
        return NodeFactory.getNodeInstance(result);

    }
    
    public String getNodeName()
    {
        String result = getInstance().getNodeName();
        /* Case insensitivity patch */
        return result.toLowerCase();
    

    }
    
    public Node getPreviousSibling()
    {
        nsIDOMNode result = getInstance().getPreviousSibling();
        return NodeFactory.getNodeInstance(result);

    }
    
    public Node replaceChild(Node newChild, Node oldChild)
    {
        nsIDOMNode mozNewchild = ((NodeImpl) newChild).getInstance();
        nsIDOMNode mozOldchild = ((NodeImpl) oldChild).getInstance();
        nsIDOMNode result = getInstance().replaceChild(mozNewchild, mozOldchild);
        return NodeFactory.getNodeInstance(result);

    }
    
    public Document getOwnerDocument()
    {
        nsIDOMDocument result = getInstance().getOwnerDocument();
        return (Document) NodeFactory.getNodeInstance(result);

    }
    
    public String getLocalName()
    {
        String result = getInstance().getLocalName();
        /* Case insensitivity patch */
        return result.toLowerCase();
    

    }
    
    public Object setUserData(String key, Object data, UserDataHandler handler)
    {
        throw new UnsupportedException();
    }
    
    public String getTextContent()
    {

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        String result = DOM3MozObject.getTextContent();
            return result;
            
    }
    
    public String lookupNamespaceURI(String prefix)
    {

        nsIDOM3Node DOM3MozObject = (nsIDOM3Node) getInstance().queryInterface(nsIDOM3Node.NS_IDOM3NODE_IID);
        String result = DOM3MozObject.lookupNamespaceURI(prefix);
            return result;
            
    }
    
    public String getNodeValue()
    {
        String result = getInstance().getNodeValue();
        return result;

    }
    
    public Node removeChild(Node oldChild)
    {
        nsIDOMNode mozOldchild = ((NodeImpl) oldChild).getInstance();
        nsIDOMNode result = getInstance().removeChild(mozOldchild);
        return NodeFactory.getNodeInstance(result);

    }
    
    public NamedNodeMap getAttributes()
    {
        nsIDOMNamedNodeMap result = getInstance().getAttributes();
        return new NamedNodeMapImpl(result);

    }
    
    public String getNamespaceURI()
    {
        String result = getInstance().getNamespaceURI();
        	/* Namespace insensitivity patch */
        if (result ==null) {
			return "";
		} else
        {
            if (lookupPrefix(result).equalsIgnoreCase("xmlns")) {
				return "";
			}
        }                
        //System.out.println("----- isDefault: " + isDefaultNamespace(result));
        //System.out.println("----- lookUpPrefix: " + lookupPrefix(result));
        //System.out.println("----- lookUpNamespaceURI: " + lookupNamespaceURI(result));
        return result;


    }
    
    public void setPrefix(String prefix)
    {
        getInstance().setPrefix(prefix);

    }
    
/***************************************************************
 *                                                             *
 * EventTarget implementation code            *
 *                                                             *
 ***************************************************************/
 
    public NodeImpl(nsIDOMEventTarget mozInst)
    {
        moz = (nsIDOMNode) mozInst.queryInterface(nsIDOMNode.NS_IDOMNODE_IID);
        instances.put(mozInst, this);
    }    
    public boolean dispatchEvent(Event evt)
    {
        nsIDOMEvent mozEvt = ((EventImpl) evt).getInstance();
        boolean result = ((nsIDOMEventTarget) getInstance().queryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID)).dispatchEvent(mozEvt);
        return result;

    }
    
    public void removeEventListener(String type, org.w3c.dom.events.EventListener listener, boolean useCapture)
    {
        nsIDOMEventListener mozListener = ((EventListenerImpl) listener).getInstance();
        ((nsIDOMEventTarget) getInstance().queryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID)).removeEventListener(type, mozListener, useCapture);

    }
    
    public void addEventListener(String type, org.w3c.dom.events.EventListener listener, boolean useCapture)
    {
        nsIDOMEventListener mozListener = ((EventListenerImpl) listener).getInstance();
        ((nsIDOMEventTarget) getInstance().queryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID)).addEventListener(type, mozListener, useCapture);

    }
    
}
