/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom;

//org.w3c imports
import java.util.concurrent.Callable;

import org.w3c.dom.Attr;
import org.w3c.dom.NodeList;
import org.w3c.dom.TypeInfo;
import org.mozilla.interfaces.*;


public class ElementImpl extends NodeImpl implements org.w3c.dom.Element
{
    protected ElementImpl(nsIDOMElement mozInst)
    {
        super( mozInst );
    }

    public static ElementImpl getDOMInstance(nsIDOMElement mozInst)
    {
        ElementImpl node = (ElementImpl) instances.get(mozInst);
        return node == null ? new ElementImpl(mozInst) : node;
    }
    
    @Override
	public nsIDOMElement getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return (nsIDOMElement) moz;
    }
    
    public void removeAttributeNS(String namespaceURI, String localName)
    {
        getInstance().removeAttributeNS(namespaceURI, localName);
    }
    
    public TypeInfo getSchemaTypeInfo()
    {

        throw new UnsupportedException();
    }
    
    public boolean hasAttributeNS(String namespaceURI, String localName)
    {
        boolean result = getInstance().hasAttributeNS(namespaceURI, localName);
        return result;
    }
    
    public void removeAttribute(String name)
    {
        getInstance().removeAttribute(name);
    }
    
    public String getAttribute(final String name)
    {
    	Callable<String> c = new Callable<String>(){
    		public String call(){
    			 String result = getInstance().getAttribute(name);
    		        /* Case insensitivity patch */
    		        //return result.toLowerCase();
    		        return result;
    		}
    	};
    	return ThreadProxy.getSingleton().syncExec(c);
       
    
    }
    
    public NodeList getElementsByTagName(String name)
    {
        nsIDOMNodeList result = getInstance().getElementsByTagName(name);
        return new NodeListImpl(result);
    }
    
    public Attr setAttributeNodeNS(Attr newAttr)
    {
        nsIDOMAttr mozNewattr = ((AttrImpl) newAttr).getInstance();
        nsIDOMAttr result = getInstance().setAttributeNodeNS(mozNewattr);
        return (Attr) NodeFactory.getNodeInstance(result);
    }
    
    public void setAttribute(String name, String value)
    {
        getInstance().setAttribute(name, value);
    }
    
    public NodeList getElementsByTagNameNS(String namespaceURI, String localName)
    {
        nsIDOMNodeList result = getInstance().getElementsByTagNameNS(namespaceURI, localName);
        return new NodeListImpl(result);
    }
    
    public String getTagName()
    {
    	Callable<String> c = new Callable<String>(){
    		
    	public String call(){
    		  String result = getInstance().getTagName();
    	        return result;	
    	}
      
    	};
    	return ThreadProxy.getSingleton().syncExec(c);
    }
    
    public Attr getAttributeNode(String name)
    {
        nsIDOMAttr result = getInstance().getAttributeNode(name);
        return (Attr) NodeFactory.getNodeInstance(result);
    }
    
    public void setIdAttributeNode(Attr idAttr, boolean isId)
    {
        nsIDOMAttr mozIdattr = ((AttrImpl) idAttr).getInstance();

        throw new UnsupportedException();
    }
    
    public Attr getAttributeNodeNS(String namespaceURI, String localName)
    {
        nsIDOMAttr result = getInstance().getAttributeNodeNS(namespaceURI, localName);
        return (Attr) NodeFactory.getNodeInstance(result);
    }
    
    public Attr setAttributeNode(Attr newAttr)
    {
        nsIDOMAttr mozNewattr = ((AttrImpl) newAttr).getInstance();
        nsIDOMAttr result = getInstance().setAttributeNode(mozNewattr);
        return (Attr) NodeFactory.getNodeInstance(result);
    }
    
    public void setAttributeNS(String namespaceURI, String qualifiedName, String value)
    {
        getInstance().setAttributeNS(namespaceURI, qualifiedName, value);
    }
    
    public void setIdAttribute(String name, boolean isId)
    {

        throw new UnsupportedException();
    }
    
    public boolean hasAttribute(String name)
    {
        boolean result = getInstance().hasAttribute(name);
        return result;
    }
    
    public String getAttributeNS(String namespaceURI, String localName)
    {
        String result = getInstance().getAttributeNS(namespaceURI, localName);
        return result;
    }
    
    public void setIdAttributeNS(String namespaceURI, String localName, boolean isId)
    {

        throw new UnsupportedException();
    }
    
    public Attr removeAttributeNode(Attr oldAttr)
    {
        nsIDOMAttr mozOldattr = ((AttrImpl) oldAttr).getInstance();
        nsIDOMAttr result = getInstance().removeAttributeNode(mozOldattr);
        return (Attr) NodeFactory.getNodeInstance(result);
    }
    
}
