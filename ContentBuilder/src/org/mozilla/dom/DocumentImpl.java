/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom;

import org.mozilla.interfaces.*;
//org.w3c imports
import org.w3c.dom.Attr;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMConfiguration;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.EntityReference;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import org.w3c.dom.Text;


public class DocumentImpl extends NodeImpl implements org.w3c.dom.Document
{
    protected DocumentImpl(nsIDOMDocument mozInst)
    {
        super( mozInst );
    }

    public static DocumentImpl getDOMInstance(nsIDOMDocument mozInst)
    {
        DocumentImpl node = (DocumentImpl) instances.get(mozInst);
        return node == null ? new DocumentImpl(mozInst) : node;
    }
    
    @Override
	public nsIDOMDocument getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return (nsIDOMDocument) moz;
    }
    
    public Attr createAttribute(String name)
    {
        nsIDOMAttr result = getInstance().createAttribute(name);
        return (Attr) NodeFactory.getNodeInstance(result);
    }
    
    public Node adoptNode(Node source)
    {
        nsIDOMNode mozSource = ((NodeImpl) source).getInstance();

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        nsIDOMNode result = DOM3MozObject.adoptNode(mozSource);
        return NodeFactory.getNodeInstance(result);

    }
    
    public Element createElement(String tagName)
    {
        nsIDOMElement result = getInstance().createElement(tagName);
        return (Element) NodeFactory.getNodeInstance(result);
    }
    
    public ProcessingInstruction createProcessingInstruction(String target, String data)
    {
        nsIDOMProcessingInstruction result = getInstance().createProcessingInstruction(target, data);
        return (ProcessingInstruction) NodeFactory.getNodeInstance(result);
    }
    
    public DOMConfiguration getDomConfig()
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        nsIDOMDOMConfiguration result = DOM3MozObject.getDomConfig();
        return new DOMConfigurationImpl(result );

    }
    
    public Comment createComment(String data)
    {
        nsIDOMComment result = getInstance().createComment(data);
        return (Comment) NodeFactory.getNodeInstance(result);
    }
    
    public DocumentType getDoctype()
    {
        nsIDOMDocumentType result = getInstance().getDoctype();
        return (DocumentType) NodeFactory.getNodeInstance(result);
    }
    
    public void normalizeDocument()
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        DOM3MozObject.normalizeDocument();

    }
    
    public String getInputEncoding()
    {

        throw new UnsupportedException();
    }
    
    public boolean getXmlStandalone()
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        boolean result = DOM3MozObject.getXmlStandalone();
            return result;

    }
    
    public void setXmlVersion(String xmlVersion)
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        DOM3MozObject.setXmlVersion(xmlVersion);

    }
    
    public Node importNode(Node importedNode, boolean deep)
    {
        nsIDOMNode mozImportednode = ((NodeImpl) importedNode).getInstance();
        nsIDOMNode result = getInstance().importNode(mozImportednode, deep);
        return NodeFactory.getNodeInstance(result);
    }
    
    public void setDocumentURI(String documentURI)
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        DOM3MozObject.setDocumentURI(documentURI);

    }
    
    public CDATASection createCDATASection(String data)
    {
        nsIDOMCDATASection result = getInstance().createCDATASection(data);
        return (CDATASection) NodeFactory.getNodeInstance(result);
    }
    
    public String getXmlVersion()
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        String result = DOM3MozObject.getXmlVersion();
            return result;

    }
    
    public NodeList getElementsByTagName(String tagname)
    {
        nsIDOMNodeList result = getInstance().getElementsByTagName(tagname);
        return new NodeListImpl(result);
    }
    
    public Element createElementNS(String namespaceURI, String qualifiedName)
    {
        nsIDOMElement result = getInstance().createElementNS(namespaceURI, qualifiedName);
        return (Element) NodeFactory.getNodeInstance(result);
    }
    
    public NodeList getElementsByTagNameNS(String namespaceURI, String localName)
    {
        nsIDOMNodeList result = getInstance().getElementsByTagNameNS(namespaceURI, localName);
        return new NodeListImpl(result);
    }
    
    public Node renameNode(Node n, String namespaceURI, String qualifiedName)
    {
        nsIDOMNode mozN = ((NodeImpl) n).getInstance();

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        nsIDOMNode result = DOM3MozObject.renameNode(mozN, namespaceURI, qualifiedName);
        return NodeFactory.getNodeInstance(result);

    }
    
    public EntityReference createEntityReference(String name)
    {
        nsIDOMEntityReference result = getInstance().createEntityReference(name);
        return (EntityReference) NodeFactory.getNodeInstance(result);
    }
    
    public void setStrictErrorChecking(boolean strictErrorChecking)
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        DOM3MozObject.setStrictErrorChecking(strictErrorChecking);

    }
    
    public DocumentFragment createDocumentFragment()
    {
        nsIDOMDocumentFragment result = getInstance().createDocumentFragment();
        return (DocumentFragment) NodeFactory.getNodeInstance(result);
    }
    
    public DOMImplementation getImplementation()
    {
        nsIDOMDOMImplementation result = getInstance().getImplementation();
        return new DOMImplementationImpl(result);
    }
    
    public boolean getStrictErrorChecking()
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        boolean result = DOM3MozObject.getStrictErrorChecking();
            return result;

    }
    
    public void setXmlStandalone(boolean xmlStandalone)
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        DOM3MozObject.setXmlStandalone(xmlStandalone);

    }
    
    public String getXmlEncoding()
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        String result = DOM3MozObject.getXmlEncoding();
            return result;

    }
    
    public Element getDocumentElement()
    {
        nsIDOMElement result = getInstance().getDocumentElement();
        return (Element) NodeFactory.getNodeInstance(result);
    }
    
    public Element getElementById(String elementId)
    {
        nsIDOMElement result = getInstance().getElementById(elementId);
        return (Element) NodeFactory.getNodeInstance(result);
    }
    
    public String getDocumentURI()
    {

        nsIDOM3Document DOM3MozObject = (nsIDOM3Document) getInstance().queryInterface(nsIDOM3Document.NS_IDOM3DOCUMENT_IID);
        String result = DOM3MozObject.getDocumentURI();
            return result;

    }
    
    public Attr createAttributeNS(String namespaceURI, String qualifiedName)
    {
        nsIDOMAttr result = getInstance().createAttributeNS(namespaceURI, qualifiedName);
        return (Attr) NodeFactory.getNodeInstance(result);
    }
    
    public Text createTextNode(String data)
    {
        nsIDOMText result = getInstance().createTextNode(data);
        return (Text) NodeFactory.getNodeInstance(result);
    }
    
}
