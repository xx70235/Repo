/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom.events;

import org.w3c.dom.events.*;
import org.w3c.dom.views.*;

//com.lixto imports
import org.mozilla.dom.*;
import org.mozilla.dom.views.*;

//XPCOM import
import org.mozilla.interfaces.*;


public class MouseEventImpl extends UIEventImpl implements org.w3c.dom.events.MouseEvent
{
    protected MouseEventImpl(nsIDOMMouseEvent mozInst)
    {
        super( mozInst );
    }

    public static MouseEventImpl getDOMInstance(nsIDOMMouseEvent mozInst)
    {
        MouseEventImpl node = (MouseEventImpl) instances.get(mozInst);
        return node == null ? new MouseEventImpl(mozInst) : node;
    }
    
    @Override
	public nsIDOMMouseEvent getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return (nsIDOMMouseEvent) moz;
    }
    
    public short getButton()
    {
        int result = getInstance().getButton();
        return (short) result;
    }
    
    public boolean getAltKey()
    {
        boolean result = getInstance().getAltKey();
        return result;
    }
    
    public void initMouseEvent(String typeArg, boolean canBubbleArg, boolean cancelableArg, AbstractView viewArg, int detailArg, int screenXArg, int screenYArg, int clientXArg, int clientYArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, short buttonArg, EventTarget relatedTargetArg)
    {
        nsIDOMAbstractView mozViewarg = ((AbstractViewImpl) viewArg).getInstance();
        nsIDOMNode casted_Relatedtargetarg =((NodeImpl) relatedTargetArg).getInstance();
        nsIDOMEventTarget mozRelatedtargetarg = (nsIDOMEventTarget) casted_Relatedtargetarg.queryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID);
        getInstance().initMouseEvent(typeArg, canBubbleArg, cancelableArg, mozViewarg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, mozRelatedtargetarg);
    }
    
    public int getClientY()
    {
        int result = getInstance().getClientY();
        return result;
    }
    
    public int getClientX()
    {
        int result = getInstance().getClientX();
        return result;
    }
    
    public boolean getMetaKey()
    {
        boolean result = getInstance().getMetaKey();
        return result;
    }
    
    public boolean getCtrlKey()
    {
        boolean result = getInstance().getCtrlKey();
        return result;
    }
    
    public boolean getShiftKey()
    {
        boolean result = getInstance().getShiftKey();
        return result;
    }
    
    public int getScreenX()
    {
        int result = getInstance().getScreenX();
        return result;
    }
    
    public int getScreenY()
    {
        int result = getInstance().getScreenY();
        return result;
    }
    
    public EventTarget getRelatedTarget()
    {
        nsIDOMEventTarget result = getInstance().getRelatedTarget();
        return (EventTarget) NodeFactory.getNodeInstance(result);
    }
    
}
