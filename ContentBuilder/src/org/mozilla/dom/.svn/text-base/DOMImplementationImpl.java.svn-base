/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom;

//org.w3c imports
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.mozilla.interfaces.*;

public class DOMImplementationImpl implements org.w3c.dom.DOMImplementation
{
    protected nsIDOMDOMImplementation moz;
    protected static WeakValueHashMap instances = new WeakValueHashMap();
    
    public DOMImplementationImpl(nsIDOMDOMImplementation mozInst)
    {
        moz = mozInst;
        instances.put(mozInst, this);
    }    

    public static DOMImplementationImpl getDOMInstance(nsIDOMDOMImplementation mozInst)
    {
        DOMImplementationImpl node = (DOMImplementationImpl) instances.get(mozInst);
        return node == null ? new DOMImplementationImpl(mozInst) : node;
    }
    
    public nsIDOMDOMImplementation getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return moz;
    }
    
    public boolean hasFeature(String feature, String version)
    {
        boolean result = getInstance().hasFeature(feature, version);
        return result;
    }
    
    public Document createDocument(String namespaceURI, String qualifiedName, DocumentType doctype)
    {
        nsIDOMDocumentType mozDoctype = ((DocumentTypeImpl) doctype).getInstance();
        nsIDOMDocument result = getInstance().createDocument(namespaceURI, qualifiedName, mozDoctype);
        return (Document) NodeFactory.getNodeInstance(result);
    }
    
    public Object getFeature(String feature, String version)
    {

        throw new UnsupportedException();
    }
    
    public DocumentType createDocumentType(String qualifiedName, String publicId, String systemId)
    {
        nsIDOMDocumentType result = getInstance().createDocumentType(qualifiedName, publicId, systemId);
        return (DocumentType) NodeFactory.getNodeInstance(result);
    }
    
}
