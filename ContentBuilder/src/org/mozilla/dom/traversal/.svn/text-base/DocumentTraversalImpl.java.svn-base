/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom.traversal;

//org.w3c imports
import org.w3c.dom.*;
import org.w3c.dom.traversal.*;
//com.lixto imports
import org.mozilla.dom.*;
//XPCOM import
import org.mozilla.interfaces.*;


public class DocumentTraversalImpl implements org.w3c.dom.traversal.DocumentTraversal
{
    protected nsIDOMDocumentTraversal moz;
    protected static WeakValueHashMap instances = new WeakValueHashMap();
    
    public DocumentTraversalImpl(nsIDOMDocumentTraversal mozInst)
    {
        moz = mozInst;
        instances.put(mozInst, this);
    }    

    public static DocumentTraversalImpl getDOMInstance(nsIDOMDocumentTraversal mozInst)
    {
        DocumentTraversalImpl node = (DocumentTraversalImpl) instances.get(mozInst);
        return node == null ? new DocumentTraversalImpl(mozInst) : node;
    }
    
    public nsIDOMDocumentTraversal getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return moz;
    }
    
    public TreeWalker createTreeWalker(Node root, int whatToShow, NodeFilter filter, boolean entityReferenceExpansion)
    {
        nsIDOMNode mozRoot = ((NodeImpl) root).getInstance();
        nsIDOMNodeFilter mozFilter = ((NodeFilterImpl) filter).getInstance();
        nsIDOMTreeWalker result = getInstance().createTreeWalker(mozRoot, whatToShow, mozFilter, entityReferenceExpansion);
        return new TreeWalkerImpl(result);
    }
    
    public NodeIterator createNodeIterator(Node root, int whatToShow, NodeFilter filter, boolean entityReferenceExpansion)
    {
        nsIDOMNode mozRoot = ((NodeImpl) root).getInstance();
        nsIDOMNodeFilter mozFilter = ((NodeFilterImpl) filter).getInstance();
        nsIDOMNodeIterator result = getInstance().createNodeIterator(mozRoot, whatToShow, mozFilter, entityReferenceExpansion);
        return new NodeIteratorImpl(result);
    }
    
}
