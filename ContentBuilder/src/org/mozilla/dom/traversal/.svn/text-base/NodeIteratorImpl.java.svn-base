/*
+-----------------------------------------------+
| do NOT edit this file!                        |
+-----------------------------------------------+
| This file is an auto-generated implementation | 
| of the coresponding org.w3c.dom interface via |
| Java-XPCOM                                    |
| (c)2005, Peter Szinek [peter@rt.sk]           |
+-----------------------------------------------+
*/


package org.mozilla.dom.traversal;

//org.w3c imports
import org.w3c.dom.*;
import org.w3c.dom.traversal.*;
//com.lixto imports
import org.mozilla.dom.*;
//XPCOM import
import org.mozilla.interfaces.*;


public class NodeIteratorImpl implements org.w3c.dom.traversal.NodeIterator
{
    protected nsIDOMNodeIterator moz;
    protected static WeakValueHashMap instances = new WeakValueHashMap();
    
    public NodeIteratorImpl(nsIDOMNodeIterator mozInst)
    {
        moz = mozInst;
        instances.put(mozInst, this);
    }    

    public static NodeIteratorImpl getDOMInstance(nsIDOMNodeIterator mozInst)
    {
        NodeIteratorImpl node = (NodeIteratorImpl) instances.get(mozInst);
        return node == null ? new NodeIteratorImpl(mozInst) : node;
    }
    
    public nsIDOMNodeIterator getInstance()
    {
        //This was already queryinterfaced, so safe to cast
        return moz;
    }
    
    public NodeFilter getFilter()
    {
        nsIDOMNodeFilter result = getInstance().getFilter();
        return new NodeFilterImpl(result);
    }
    
    public Node nextNode()
    {
        nsIDOMNode result = getInstance().nextNode();
        return NodeFactory.getNodeInstance(result);
    }
    
    public Node getRoot()
    {
        nsIDOMNode result = getInstance().getRoot();
        return NodeFactory.getNodeInstance(result);
    }
    
    public Node previousNode()
    {
        nsIDOMNode result = getInstance().previousNode();
        return NodeFactory.getNodeInstance(result);
    }
    
    public void detach()
    {
        getInstance().detach();
    }
    
    public boolean getExpandEntityReferences()
    {
        boolean result = getInstance().getExpandEntityReferences();
        return result;
    }
    
    public int getWhatToShow()
    {
        long result = getInstance().getWhatToShow();
        return (int) result;        
    }
    
}
